CIS 520 - Programming Project #1

---- GROUP ----

Blake Holman baholman@ksu.edu
Gabriel Serrano gjserrano@ksu.edu
Cullen Povilonis cullenp@ksu.edu

---- PRELIMINARIES ----
>>This is wherw we cite any external sources used to complete the assignment.
>>Also where we make any specific notes for the graders.

Stuart Harrell - stuartharrell.com/blog/2016/12/16/efficient-alarm-clock


                        ALARM CLOCK
                        ===========

---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less

  struct thread *thr_a = list_entry(a, struct thread, elem);
  struct thread *thr_b = list_entry(b, struct thread, elem);

  These two structs are used in the sleeping_compare method and return true or false according to wakeup time.

    struct thread *currentThread = thread_current ();
    enum intr_level old_level;

    This struct and enum are used to avoid busy waiting, where currentThread points to the current thread and the enums refer to the current interrupt and previous interrupt respectively.

        enum thread_reason { UNKNOWN, SLEEPING };

        struct thread_blocked {
                enum thread_reason reason;
        union {
                int wakeup_time;
        };
        };

  The enum at the top is used to state why the thread was blocked. The struct thead_blocked is used as a blocker to see if the thread is blocked, utilizing the enum thread_reason.

  static struct list blocked_processes;

  The list of blocked threads that are in THREAD_BLOCKED


---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


A2: When you call timer sleep, the process sleeps for approximately tick ticks. Interrupts are used and the CPU is yielded to another process.

A3: We ordered our list holding the sleeping processes by wake up time, so that when we get to the point where we have to use the timer interrupt handler it only has to look from the top of that list, only waking up a thread if its wake up time has passed.


---- SYCHRONIZATION ----
>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

A4: We disable interrupts whenever accessing anything mentioned in A1, allowing us to make all of the read/write atomic.

A5: In order to prevent races between the timer interrupt and the timer_sleep(), we diable interrupts in the sections of time_sleep where race conditions could occur (hopefully if it worked) avoiding race conditions.


---- RATIONALE ----
>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

A6: To be honest with you, it's just what worked (mostly) for us. We threw a lot of different code at the project just trying to get the tests to pass.


                        PRIORITY SCHEDULING
                        ===================

---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
>> B2: Explain the data structure used to track priority donation.

B1: 

int init_priority; -> This is th non-donated priority within the thread.

struct list donations; -> The list that contains the threads that are waiting on the lock the current thread has. 

struct lock *waiting_for_lock; -> The lock that is currently waiting for the lock.

struct list_elem donation_elem; -> The element within the list that can be added to another thread's donation list.

B2: With threads High, Medium, and Low. High priority thread waiting an a lock held by a medium prioroty thread will donate its priority to the medium priority thread. Similarly the high priority thread is waiting on a lock being held by a low priority thread it will also donate it's priority. The same thing goes for a medium priority waiting on a low priority thread waiting on a lock. Lastly, if a high priority thread is waiting on a lock that a medium priority thread has and a medium priority is waiting on a lock owned by a  low priority thread then the medium and high priority threads will donate their priority to the lowest priority thread.


---- ALGORITHMS ----
>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

B3: For a semaphore, in the synch.h file there is a list of waiters (threads waiting). The thread with the highest prioroty is at the front of that list, meaning that whenever a thread is woken up, the thread at the front of that list is woken up meaning that the highest priority thread is woken up.

B4: First, the current thread updates its waiting for lock variable with the lock that it is waiting for. Second, the current thread adds itself to the lock holders donation list. The prioroty will be donated eventually. :)

B5: The lock holder is updated to null, then the threads waiting fir the lock that was just released are removed from the current threads donations list, then the donation is refreshed. Then the highest priority thread acquires the lock and is put in the ready queue. Lastly, check to see if the current thread still has the highest priority, if it does not then it yields the processor.  :) 


---- SYNCHRONIZATION ----
>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race

B6: Interrupts are turned off, so there are no read/write errors. The lock is there to prevent the race condition. A potential race condition would occurif the thread priority was being updated by the interrupt handler and the method at the same time. 


---- RATIONALE ----
>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

B7: Same as A6, it's just what we found that (mostly) worked. We were simply creating code that did the job to pass the tests.



                        ADVANCED SCHEDULER
                        ==================

---- DATA STRUCTURES ----


---- ALGORITHMS ----

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
0
4
8
12
16
20
24
28
32
36

---- SYNCHRONIZATION ----


---- RATIONALE ----



