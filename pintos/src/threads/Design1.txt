CIS 520 - Programming Project #1

---- GROUP ----

Blake Holman baholman@ksu.edu
Gabriel Serrano gjserrano@ksu.edu
Cullen Povilonis cullenp@ksu.edu

---- PRELIMINARIES ----
>>This is wherw we cite any external sources used to complete the assignment.
>>Also where we make any specific notes for the graders.

n/a so far

			ALARM CLOCK
			===========

---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less


---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


---- SYCHRONIZATION ----
>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


---- RATIONALE ----
>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



			PRIORITY SCHEDULING
			===================

---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
>> B2: Explain the data structure used to track priority donation.



---- ALGORITHMS ----
>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.



---- SYNCHRONIZATION ----
>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?



---- RATIONALE ----
>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?



			ADVANCED SCHEDULER
			==================

---- DATA STRUCTURES ----


---- ALGORITHMS ----

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
0
4
8
12
16
20
24
28
32
36

---- SYNCHRONIZATION ----


---- RATIONALE ----


